# Signature
ctrl Room = 1;
ctrl User = 1;
ctrl User2 = 0;
ctrl Spool = 1;
ctrl Printer = 2;
ctrl Computer = 1;
ctrl Job = 0;
ctrl A = 0;
ctrl B = 0;
ctrl C = 0;
ctrl D = 0;

# some elementary bigraphs
# big join = id | id;
# big g11 = ([{1}, {0}], 2);

#keine verlinkung drückt man hier mit unterdrückung aus
#/e1 /e3
# unterschiedliche verbindung (die /... spielen eigentlich keine rolle)
#.(Job.1)
#| Printer{b,e0}.1
big cwithj = Computer{a}. (Job.1 | Job.Job.1 | Job.1);

big s0 = /e0 /e1 (((Room{e1} . (cwithj | Computer{a}.1 | Computer{a}.1 | Job.1)) | (Spool{e0}.1)) 
| (Room{e1} . (User{jeff} . (Job.1 | Job.1) | Job.1 | Job.1)));

# gleiche verbindung (die /... spielen eigentlich keine rolle)
#big s0 = /a ((Room{e2} . (Computer{a}.1 | Computer{a}.1)) | (Spool{e1}.1)); # | (Room{e2} . (User2{jeff} . (Job.1))));


# Reaction rules
react nil = Job --> Job;

big phi = /{w0,w1} Printer{w0,w1}.1;

big klo = (Computer{b1}.(id(1)) | Computer{b1}.(Job.1) | Job.1); #| Printer{b1,e1}.1
big klo2 = (Computer{b1}.1 | Computer{b1}.1 | Job.1); #| Printer{b1,e1}.1

react cp = klo --> klo;

big klo2 = User{jeff1}.(Job.1 | Job.1);
react ur = 
klo2 -> klo2;

big blu = Job || Job;


# Reactive system
begin brs
  init s0;
  #rules = [ {nil} ];
  rules = [ {cp} ];
  #rules = [ {ur} ];
end
